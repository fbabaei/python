#!/usr/bin/env python
import sys
import os
import subprocess
import pipes

class Utility(object):
    '''
    This is a collection of functions that are commonly needed

    '''
    def __init__(self):
        SNNAS = "10.65.170.164"
        share = "/stornext/snfs1/fb2"
        self.mount_point = "/mnt/"+SNNAS
        self.SNNAS = SNNAS
        self.share = share
        self.type = "nfs"
        self.user = "root"
        self.mount_point = "/mnt/"+"%s" % self.SNNAS
        self.REMOTE_HOSTS_IPS = [139, 141, 145, 149, 150, 155, 157, 158, 167, 168, 178, 183, 187, 190, 191, 193, 194, 195, 201, 202, 204, 205, 207, 208, 210, 213, 214, 215]
        self.VMCLONE_PERL = "/usr/lib/vmware-vcli/apps/vm/vmclone.pl"
        self.VMCLONE_ARGS = "--url https://10.30.201.142/sdk/vimService --username administrator\@vsphere.local --password P\@ssw0rd --vmhost 10.30.242.48 --datastore LARGETB2 --vmname Centos6-K9-Clone1 --vmname_destination Centos6-K9--$i"

    '''
    1. Get the ip of the remote client VM
    2. ssh login to the remote client VM to setup trust and update the know_hosts
    2. Check for/create the mount point
    3. ssh then remote mount the appliance share on the remote machine
    4. Create dmatrix directory through the remote machine on the share
    5. Create dmatrix
    6. Verify dmatrix

    '''

    def file_accessible(self, filepath, mode):
        ''' Check if a file exists and is accessible. '''
        try:
            f = open(filepath, mode)
            f.close()
        except IOError as e:
            print e
            return 1
        return 0

    def remote_file_exists(self, host, path):
        proc = subprocess.call(['ssh', host, 'test -f %s' % pipes.quote(path)])
        proc.wait()
        return proc.returncode == 0
        # example: if exists_remote('ubuntu@serverB.com', 'b.jpeg'):
                        # it exists...
    # or : return subprocess.call(['ssh', host, 'test -e ' + pipes.quote(path)]) == 0
    def remote_directory_exists(self, host, path):
        proc = subprocess.Popen(['ssh', host, 'test -d %s' % pipes.quote(path)])
        proc.wait()
        return proc.returncode == 0

    def remote_mkdir(self, user, host, mount_point):
        proc = subprocess.Popen(['ssh', '%s\@%s', 'mkdir -p %s' % (self.user, self.host, self.mount_point)])
        proc.wait()
        return proc.returncode == 0

    def remote_umount(self):
        proc = subprocess.Popen(['ssh', '%s\@%s', 'umount %s' % (self.user, self.host, self.mount_point)])
        proc.wait()
        return proc.returncode == 0

    def remote_mount(self):
        proc = subprocess.Popen(['ssh', '%s\@%s', 'mount %s:%s %s' % (self.user, self.host, self.SNNAS, self.share, self.mount_point)])
        proc.wait()
        return proc.returncode == 0
    def safe_remote_mount(self, host, mount_point):
        print("Host Name: %s Checking if %s exits") % (host, mount_point)
        if self.remote_directory_exists(host, mount_point):
            print("Host Name: %s un-mounting %s for initialization and clean up ...") % (host, self.mount_point)
            try:
                self.remote_umount(self)
            except IOError as e:
                print("Unable to unmount %s" % mount_point)
                print e
            print("Successfully unmounted %s" % mount_point)
        else :
            print("Creating remote %s directory on %s" % (mount_point, host))
            try:
                self.remote_mkdir(self)
            except IOError as e:
                print("Unable to make remote %s on %s" % (mount_point, host))
            print("Successfully unmounted %s" % mount_point)
        try:
            print("Trying to remotely mount share %s of the host %s on %s" % (self.share, self.host, self.mount_point))
            self.remote_mount(self)
        except IOError as e:
            print("Unable to remotely mount %s on %s" % (mount_point, host))
            return 1
        return 0

        def mount_share(self,arg):
            for share in range(arg[0],arg[1]):
                print("Share: %d ") % share
                mount_point = "/mnt/"+"%s" % share
                print "mountpoint: %s" % mount_point
                subprocess.Popen("mkdir %s; mount 10.30.241.43:/stornext/snfs1/fb2 %s" % (mount_point, mount_point), shell=True)
        #subprocess.Popen("mkdir /mnt/10.30.241.43; mount 10.30.241.43:/stornext/snfs1/fb2 /mnt/10.30.241.43", shell=True)
        def create_files_on_a_share(self,arg):
            # creating files on the share
            for num in range(arg[0],arg[1]):
                file_name = "file"+"%s" % num
                subprocess.Popen("touch %s/%s" % (mount_point, file_name), shell=True)

        def wite_to_file(self):
            for num in range(100,1000):
                file_name = "file"+"%s" % num
                # Writing data to all files
                subprocess.Popen("echo %s/%s > %s" % (mount_point, file_name, file_name), shell=True)
def main(obj):
    for host in obj.REMOTE_HOSTS_IPS:
        host = "10.30.241.%s" % host
        try:
            host
        except NameError:
            host = 0
        if not host:
            host = obj.host
        try:
            obj.mount_point
        except NameError:
            mount_point = 0
        if not host:
            mount_point = obj.mount_point
        print("Host Name: %s Checking if %s exits") % (host, obj.mount_point)
        try:
            print("Trying to remotely mount share %s of the host %s on %s" % (obj.share, host, obj.mount_point))
            obj.safe_remote_mount(host, mount_point)
        except IOError as e:
            print("Unable to remotely mount %s on %s" % (obj.mount_point, host))
            print e
obj = Utility()

main(obj)

if __name__ == "__main__":
    print "Running This as a Script:"



