'''
Created on Jan 19, 2016

@author: Fereydoun
'''
class A:
    def f(self):
        return self.g()
    def g(self):
        return 'A'
class B(A):
    def g(self):
        return B
     
'''
Learning class and objects in python
'''
   
class Canvas():
    def __init__(self,width, height):
        self.width = width
        self.height = height
        self.data = [[' ']* width for i in range(height)]
    def setpixel(self, row, col):
        self.data[row][col] = '*'
    def getpixel(self, row, col):
        return self.data[row][col]
    def display(self):
        print "\n".join(["".join(row) for row in self.data])
    
class Shape:
    def paint(self, canvas):pass

class Rectangle(Shape):
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w 
        self.h = h
    def hline(self, x, y, w):
        pass
    def vline(self, x, y, h):
        pass
    def paint(self, canvas):
        self.hline(self.x,self.y, self.w)
        self.hline(self.x, self.y+self.h, self.w)
        self.vline(self.x, self.y, self.h)
        self.vline(self.x+ self.w, self.y, self.h)
class Square(Rectangle):
    def __init(self, x, y, size):
        Rectangle.__init__(self, x, y, size, size)
        
class CompoundShape(Shape):
    def __init__(self, shapes):
        self.shapes = shapes
        
    def paint(self, canvas):
        for s in self.shapes:
            s.paint(canvas)

def product(x,y):
    x -=1
    if x == -1:
        return 0
    elif x == 0:
        return y
    else:
        return y + product(x,y)
def flatten_dict(d):
    print d
    nd = {}
    for k,v in d.iteritems():
        print k,v
        if isinstance(v, dict):
            for kk, vv in v.iteritems():
                nd[k+'.'+kk] = vv
        else:
            print type(v)
            print k,v
            nd[k] = v    
    return nd
import os
import sys            
def dirlist():
    for top,dirs,files in os.walk('./'):
        for nm in files:
            print os.path.join(top,nm)
def scan_dir(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir,name)
        if os.path.isfile(path):
            print path
        else:
            scan_dir(path)
         
def list_files_recursive(direct):
#     [os.path.join(x[0],y) for x in os.walk('<some_directory>') for y in x[2]] 
    for x in os.walk(direct):
        print direct
        print x[0],x[1],x[2]            
    for i in [os.path.join(x[0],y) for x in os.walk(direct) for y in x[2]]:
        print i
def unixcommand(f):
    def g():
        print(out for line in f.readlines()for out in f(line))
    return g

def mapnest(l):
#     return [lambda x: x*x if not isinstance(x,'list') else mapnest(x), l]
    nl = []
    for x in l:
        if not isinstance(x,list):
            nl.append(x*x)
        else:
            print 'it is a list'
            print x
            mapnest(x)
    return nl
if __name__ == '__main__':
    print mapnest([1,2,[3,4],5])

#     a = A()
#     b = B()
#     print a.f()
#     print a.g()
#     print b.f()
#     print b.g()
#     c = Canvas(4,5)
#     sh = Shape()
#     s = Square(1,2,3,3)
#     print s.paint(c)
#     print product(10,5)
#     d = {'a': 1, 'b': {'x': 2, 'y': 3}, 'c': 4}
#     print flatten_dict(d)
#     dirlist()
#     list_files_recursive('./')
#     f = "C:\Users\Fereydoun\workspace\projpy\src\inpit.txt"
#     @unixcommand
#     def printl(l):
#         yield l
#     
    